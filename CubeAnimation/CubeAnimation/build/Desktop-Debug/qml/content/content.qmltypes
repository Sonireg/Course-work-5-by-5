import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "menu.h"
        name: "MainMenu"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/MainMenu 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property { name: "currState"; type: "int"; notify: "currStateChanged"; index: 0 }
        Property { name: "prevState"; type: "int"; notify: "currStateChanged"; index: 1 }
        Signal { name: "currStateChanged" }
        Method {
            name: "setCurrState"
            Parameter { type: "int" }
        }
        Method { name: "quit" }
    }
    Component {
        file: "rubickscube.h"
        name: "RubicksCube"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/RubicksCube 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property { name: "currMoveText"; type: "QString"; notify: "solutionTextChanged"; index: 0 }
        Property { name: "prevSolutionMoves"; type: "QString"; notify: "solutionTextChanged"; index: 1 }
        Property { name: "nextSolutionMoves"; type: "QString"; notify: "solutionTextChanged"; index: 2 }
        Property { name: "amountOfMovesInSolution"; type: "int"; notify: "solutionTextChanged"; index: 3 }
        Property { name: "currStepOfSolution"; type: "int"; notify: "solutionTextChanged"; index: 4 }
        Property { name: "isFirstMove"; type: "bool"; notify: "moveChanged"; index: 5 }
        Property { name: "isLastMove"; type: "bool"; notify: "moveChanged"; index: 6 }
        Property { name: "isAutoAnimating"; type: "bool"; notify: "moveChanged"; index: 7 }
        Property {
            name: "animatingButtonText"
            type: "QString"
            notify: "animatingButtonTextChanged"
            index: 8
        }
        Signal { name: "solutionTextChanged" }
        Signal { name: "moveChanged" }
        Signal { name: "animatingButtonTextChanged" }
        Method {
            name: "getXRotationOf"
            type: "double"
            Parameter { type: "QString" }
        }
        Method {
            name: "getYRotationOf"
            type: "double"
            Parameter { type: "QString" }
        }
        Method {
            name: "getZRotationOf"
            type: "double"
            Parameter { type: "QString" }
        }
        Method {
            name: "setColor"
            Parameter { type: "QString" }
            Parameter { type: "QString" }
        }
        Method { name: "stateIsValid"; type: "bool" }
        Method { name: "animateRotU" }
        Method { name: "animateRotUSt" }
        Method { name: "animateRotR" }
        Method { name: "animateRotRSt" }
        Method { name: "animateRotD" }
        Method { name: "animateRotDSt" }
        Method { name: "animateRotL" }
        Method { name: "animateRotLSt" }
        Method { name: "animateRotF" }
        Method { name: "animateRotFSt" }
        Method { name: "animateRotB" }
        Method { name: "animateRotBSt" }
        Method { name: "animateRotu" }
        Method { name: "animateRotuSt" }
        Method { name: "animateRotd" }
        Method { name: "animateRotdSt" }
        Method { name: "animateRotl" }
        Method { name: "animateRotlSt" }
        Method { name: "animateRotr" }
        Method { name: "animateRotrSt" }
        Method { name: "animateRotb" }
        Method { name: "animateRotbSt" }
        Method { name: "animateRotf" }
        Method { name: "animateRotfSt" }
        Method {
            name: "setStateFromScramble"
            type: "bool"
            Parameter { type: "QString" }
        }
        Method { name: "setRandomState" }
        Method { name: "setStateFromScan" }
        Method { name: "setSolved" }
        Method { name: "solve" }
        Method { name: "onForwardClicked" }
        Method { name: "onBackClicked" }
        Method { name: "disableSolveButtons" }
        Method { name: "onStartStopClicked" }
    }
    Component {
        file: "solver.h"
        name: "Solver"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/Solver 1.0"]
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "statefromscangetter.h"
        name: "StateFromScanGetter"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/StateFromScanGetter 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
    }
}
